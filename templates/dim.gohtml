{{define "dim"}}
<!doctype html>
<html translate="no">
	<head>
		{{template "head"}}
		<style>
		img.leaflet-tile {
			image-rendering: pixelated;
		}
		html, body {
			height: 100%;
		}
		#sidebar {
			height: 100%;
			width: 280px;
		}
		body {
			display: flex;
			overflow: hidden;
			height: 100%;
			flex-direction: column;
		}
		div#content {
			display: flex;
			flex-direction: row;
			flex-grow: 2;
		}
		div#sidebar {
			padding: 0.5rem;
			min-width: 0;
		}
		div#mapcontainer {
			flex: auto;
			background-color: green;
		}
		div#map {
			width: 100%;
			height: 100%;
		}
		</style>
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css"
			integrity="sha512-xodZBNTC5n17Xt2atTPuE1HxjVMSvLVW9ocqUKLsCC5CXdbqCmblAshOMAS6/keqq/sMZMZ19scR4PsZChSR7A=="
			crossorigin=""/>
		<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"
			integrity="sha512-XQoYMqMTK8LvdxXYG3nZ448hOEQiglfqkJs1NOQV44cWnUrBc8PkAOcXy20w0vlaXaVUearIOBhiXZ5V3ynxwA=="
			crossorigin=""></script>
		<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/hammerjs@2.0.8"></script>
		<link href='https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/leaflet.fullscreen.css' rel='stylesheet'/>
		<script src='https://api.mapbox.com/mapbox.js/plugins/leaflet-fullscreen/v1.0.1/Leaflet.fullscreen.min.js'></script>
		<link rel="stylesheet" href="/static/Control.Loading.css" />
		<script src="/static/Control.Loading.js"></script>
		<title>WebChunk {{.World.Name}}</title>
	</head>
	<body>
		{{template "nav" . }}
		<div id="content">
			<div id="sidebar">
				<div class="mb-3">
					<p>World: <code>{{.World.Name}}</code></p>
					<p>Dimension: <code>{{.Dim.Name}}</code></p>
				</div>
				<div class="mb-3">
					<table>
						<tr>
							<td>X</td>
							<td><input class="form-control" type="number" id="gotoX" value="-280"></td>
						</tr>
						<tr>
							<td>Z</td>
							<td><input class="form-control" type="number" id="gotoZ" value="620"></td>
						</tr>
						<tr>
							<td>Zoom</td>
							<td><input class="form-control" type="number" id="gotoS" value="5"></td>
						</tr>
					</table>
					<a class="btn btn-primary" style="width: 100%" onclick="mapGoTo();">Jump to coordinates</a>
				</div>
				<div class="mb-3">
					<div class="form-check form-switch">
						<label class="form-check-label" for="enableCache">Enable cache</label>
						<input class="form-check-input" autocomplete="off" type="checkbox" role="switch" id="enableCache" checked>
					</div>
				</div>
				<div class="mb-3">
					<a class="btn btn-primary" style="width: 100%" onclick="mapReload();">Reload images</a>
				</div>
			</div>
			<div id="mapcontainer">
					<div id="map">
					</div>
			</div>
		</div>
		<script>
		let maxZoomBack = 8;
		var enableCacheCheck = document.getElementById('enableCache');
		var redrawint = Math.floor( Math.random() * 200000 ) + 1
		var getRedrawInteger = function() {
			return redrawint;
		};
		function mapGoTo() {
			let z = document.getElementById('gotoZ').value;
			let x = document.getElementById('gotoX').value;
			let s = document.getElementById('gotoS').value;
			mymap.setView([-z/16, x/16], maxZoomBack-s);
		}
		function mapReload() {
			redrawint += 1;
			mymap.eachLayer(function(layer) {
				layer.redraw();
			})
		}
		L.CursorHandler = L.Handler.extend({
			addHooks: function () {
				this._map.on('mouseover', this._open, this);
				this._map.on('mousemove', this._update, this);
				this._map.on('mouseout', this._close, this);
			},
			removeHooks: function () {
				this._map.off('mouseover', this._open, this);
				this._map.off('mousemove', this._update, this);
				this._map.off('mouseout', this._close, this);
			},
			_open: function (e) {
				this._update(e);
				this._popup.openOn(this._map);
			},
			_close: function () {
				this._map.closePopup(this._popup);
			},
			_update: function (e) {
				this._popup.setLatLng(e.latlng)
					.setContent(e.latlng.toString()+'<br>'+e.layerPoint.toString());
			}
		});
		L.Map.addInitHook('addHandler', 'cursor', L.CursorHandler);
		var defaultLayerSettings = {
			maxNativeZoom: maxZoomBack, minNativeZoom: 0, maxZoom: maxZoomBack, minZoom: 0,
			tileSize: 256, zoomReverse: true,
			zoomSnap: 0.25, attribution: '&copy; WebChunk Contributors',
			requestCached: function() {
				return enableCacheCheck.checked;
			},
			redrawnum: getRedrawInteger,
		}

		var voidlayer = L.tileLayer('/thisdoesnotexist', defaultLayerSettings);
		{{range $i, $l := .Layers}}var layer{{noescapeJS $l.Name}} = L.tileLayer('/worlds/{{$.World.Name}}/{{$.Dim.Name}}/tiles/{{$l.Name}}/{z}/{x}/{y}/png?cached={requestCached}&redraw={redrawnum}', defaultLayerSettings);
		{{end}}
		
		L.GridLayer.GridCoordinates = L.GridLayer.extend({
			createTile: function (coords) {
				const tile = document.createElement('div');
				tile.style.outline = '1px solid green';
				tile.style.fontWeight = 'bold';
				tile.style.fontSize = '14pt';
				tile.innerHTML = [maxZoomBack-coords.z, coords.x, coords.y].join('/');
				tile.innerHTML += '<br>'+[coords.x*Math.pow(2, maxZoomBack-coords.z)*16, coords.y*Math.pow(2, maxZoomBack-coords.z)*16].join('/');
				return tile;
			},
		});
		L.gridLayer.gridCoordinates = function (opts) {
			return new L.GridLayer.GridCoordinates(opts);
		};
		let coordinatelayer = L.gridLayer.gridCoordinates();
		var mymap = L.map('map', {
			cursor: false,
			crs: L.CRS.Simple,
			fullscreenControl: true,
			loadingControl: true,
			layers: [{{range $1, $l := .Layers}}{{if $l.IsDefault}}layer{{noescapeJS $l.Name}},{{end}}{{end}} coordinatelayer]
		}).setView([0, 0], 3);
		L.control.scale({metric: true, imperial: false}).addTo(mymap);
		L.control.layers({
			{{range $1, $l := .Layers}}{{if $l.IsOverlay}}{{else}}"{{$l.DisplayName}}": layer{{noescapeJS $l.Name}},
			{{end}}{{end}}}, {
			{{range $1, $l := .Layers}}{{if $l.IsOverlay}}"{{$l.DisplayName}}": layer{{noescapeJS $l.Name}},
			{{else}}{{end}}{{end}}"Coordinates": coordinatelayer
		}).addTo(mymap);
		</script>
	</body>
</html>
{{end}}